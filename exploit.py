import time
import subprocess as sp
import sys
import math
import matplotlib.pyplot as plt
import numpy as np

SAMPLES = 100
ALPHABET = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

def plot(d):
    X = np.arange(len(d))
    keys = list(sorted(d.keys()))
    values = [d[k] for k in keys]
    values = list(map(lambda x: x - min(values), values))
    plt.bar(X, values, align='center', width=0.5)
    plt.xticks(X, keys)
    ymax = max(values) * 1.1
    plt.ylim(0, ymax)
    plt.show()

def run_server(secret):
    start = time.perf_counter()
    ret = sp.call(["./server", secret], stdout=sp.DEVNULL)
    end = time.perf_counter()

    return ret, (end - start)

def sample(secret, times):
    ret = None
    samples = []
    for i in range(0, times):
        ret, time = run_server(secret)
        samples += [time]

    return ret, samples

def guess(prefix):
    guess_to_time = {}
    for char in ALPHABET:
        g = prefix + char

        ret, samples = sample(g, SAMPLES)
        if ret == 0:
            print("Found: ", g)
            sys.exit()

        median = list(sorted(samples))[len(samples)//2]
        guess_to_time[char] = median

    def getTime(e):
        return e[1]
    ranked = list(sorted(guess_to_time.items(), key=getTime))
    best_guess, best_guess_time = ranked[-1]
    second_guess, second_time = ranked[-2]
    avg_time = sum(map(lambda x: x[1], ranked)) / len(ranked)

    return best_guess

def guess_with_check(prefix, checks):
    guessed = guess(prefix)
    check_failed = False
    check = None
    for i in range(0, checks):
        check = guess(prefix)
        if check != guessed:
            check_failed = True
            break
    if check_failed:
        print("Mismatch: ", guessed, "-", check)
        return guess_with_check(prefix)
    else:
        return guessed

current = ""
while True:
    guessed_char = guess_with_check(current, 2)
    current = current + guessed_char
    print(current)
